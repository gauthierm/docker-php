<VirtualHost *:80>
    DocumentRoot /var/www/html
    ServerName localhost
    ServerAlias localhost

    # Available loglevels: trace8, ..., trace1, debug, info, notice, warn,
    # error, crit, alert, emerg.
    # It is also possible to configure the loglevel for particular
    # modules, e.g.
    #LogLevel info ssl:warn

    ErrorLog ${APACHE_LOG_DIR}/error.log
    CustomLog ${APACHE_LOG_DIR}/access.log combined

    # Vary caching based on X-Forwarded-Proto so proxied HTTPS is cached
    # separately. This custom header is passed from the reverse proxy to
    # httpd.
    Header append Vary X-Forwarded-Proto

    # Don't use ETags for caching. Instead we set a far-future expires
    # header. Caching configuration for static files is handled in the
    # Nginx configuration.
    FileETag None

    <IfModule rewrite_module>
        RewriteEngine on
        RewriteOptions inherit

        # Rewrite directories without trailing slashes to have trailing
        # slashes. We use mod_rewrite instead of mod_directory because of
        # issues with mod_directory.
        RewriteCond %{HTTP:X-Forwarded-Proto} .+
        RewriteCond %{REQUEST_FILENAME} !/$
        RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -d
        RewriteRule ^(.*)$ %{HTTP:X-Forwarded-Proto}://%{SERVER_NAME}$1/ [last,qsappend,R=301]
    </IfModule>

    <Directory /var/www/html>
        php_value date.timezone UTC
        php_value max_execution_time 300
        php_value post_max_size 200M
        php_value upload_max_filesize 200M

        AddDefaultCharset UTF-8

        ErrorDocument 403 /index.php?source=httperror
        ErrorDocument 404 /index.php?source=httperror
        ErrorDocument 500 /index.php?source=httperror
    </Directory>

    # Site-level rewrite rules. These rules are for serving dynamic requests.
    <IfModule rewrite_module>

        # Rewrite rule to serve regular files from the site directory. If the
        # request matches a file on the filesystem, the rewrite engine skips
        # evaluating any other rules and serves the file directly. On
        # production, most files matches by this rule will be served directly
        # by Nginx. This rule allows files unknown by Nginx to continue to be
        # served properly. For example, favicon.ico is served using this rule.
        RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -f [OR]
        RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -l [OR]
        RewriteCond %{DOCUMENT_ROOT}%{REQUEST_FILENAME} -d
        RewriteRule ^.*$ - [last]

        # Handle serving static files directly without passing to the
        # application bootstrap.
        RewriteRule ^/(compiled|css|flash|fonts|images|javascript|js|media|min|packages|static|styles|vendor)/(.*)$ /$1/$2 [qsappend,last]

        # Rewrite URLs for the admin site to the admin application bootstrap
        # script.
        RewriteRule ^/admin/(.*)$ /admin/index.php?source=$1 [qsappend,nocase,last]

        # Rewrite URLs for the regular site to the application bootstrap script.
        RewriteRule ^/(.*)$ /index.php?source=$1 [qsappend,nocase,last]
    </IfModule>

</VirtualHost>
